//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PylonGameEngine.Resources {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Shaders {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Shaders() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("PylonGameEngine.Resources.Shaders", typeof(Shaders).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die //////////////////////
        ///////   GLOBALS
        /////////////////////////
        ///cbuffer ShaderInput
        ///{
        ///	float4 Color;
        ///};
        ///
        /////////////////////////
        ///////   TYPES
        /////////////////////////
        ///struct PixelInputType
        ///{
        ///	float4 position : SV_POSITION;
        ///	float2 tex : TEXCOORD0;
        ///	float3 normal : NORMAL;
        ///};
        ///
        /////////////////////////
        ///////   Pixel Shader
        ////////////////////////
        ///float4 ColorShader(PixelInputType input) : SV_TARGET
        ///{
        ///	return Color;
        ///}
        /// ähnelt.
        /// </summary>
        public static string ColorShader {
            get {
                return ResourceManager.GetString("ColorShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die //////////////////////
        ///////   GLOBALS
        /////////////////////////
        ///Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///cbuffer CharacterColorBuffer : register(b0)
        ///{
        ///	float4 CharacterColor;
        ///};
        /////////////////////////
        ///////   TYPEDEFS
        /////////////////////////
        ///struct Pixel2DInputType
        ///{
        ///	float4 position : SV_POSITION;
        ///	float2 tex : TEXCOORD0;
        ///};
        ///
        /////////////////////////
        ///////   Pixel Shader
        ////////////////////////
        ///float4 FontRenderer(Pixel2DInputType input) : SV_TARGET
        ///{
        ///	float4 OutputColor;
        ///
        ///	// Sample the pixel color from t [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string FontRender {
            get {
                return ResourceManager.GetString("FontRender", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die //////////////////////
        ///////   GLOBALS
        /////////////////////////
        ///Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        ///cbuffer ShaderInput
        ///{
        ///	float4 ambientColor;
        ///	float4 diffuseColor;
        ///	float3 lightDirection;
        ///	float specularPower;
        ///	float4 specularColor;
        ///};
        ///
        /////////////////////////
        ///////   TYPEDEFS
        /////////////////////////
        ///struct PixelInputType
        ///{
        ///	float4 position : SV_POSITION;
        ///	float2 tex : TEXCOORD0;
        ///	float3 normal : NORMAL;
        ///	float3 viewDirection : TEXCOORD1;
        ///};
        ///
        /////////////////////////
        ///////   Pixel Shader
        ////////////// [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string SpecularShader {
            get {
                return ResourceManager.GetString("SpecularShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die //////////////////////
        ///////   GLOBALS
        /////////////////////////
        ///Texture2D shaderTexture;
        ///SamplerState SampleType;
        ///
        /////////////////////////
        ///////   TYPEDEFS
        /////////////////////////
        ///struct PixelInputType
        ///{
        ///	float4 position : SV_POSITION;
        ///	float2 tex : TEXCOORD0;
        ///};
        ///
        /////////////////////////
        ///////   Pixel Shader
        ////////////////////////
        ///float4 TextureShader(PixelInputType input) : SV_TARGET
        ///{
        ///	float4 textureColor;
        ///
        ///	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
        ///	textureC [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string TextureShader {
            get {
                return ResourceManager.GetString("TextureShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///////////////////////
        ///////   GLOBALS
        //////////////////////////
        ///cbuffer MatrixBuffer : register(b0)
        ///{
        ///	matrix viewMatrix;
        ///	matrix projectionMatrix;
        ///};
        ///
        ///cbuffer ObjectBuffer : register(b1)
        ///{
        ///	matrix objectmatrix;
        ///};
        ///
        /////////////////////////
        ///////   TYPES
        /////////////////////////
        ///
        ///struct Vertex2DInputType
        ///{
        ///	float4 position : POSITION;
        ///	float2 tex : TEXCOORD0;
        ///};
        ///
        ///struct Pixel2DInputType
        ///{
        ///	float4 position : SV_POSITION;
        ///	float2 tex : TEXCOORD0;
        ///};
        ///
        ////////////////////////////////////////
        ////////   Vertex Shader
        //////// [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string VertexShader2D {
            get {
                return ResourceManager.GetString("VertexShader2D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ///////////////////////
        ///////   GLOBALS
        //////////////////////////
        ///cbuffer MatrixBuffer : register(b0)
        ///{
        ///	matrix viewMatrix;
        ///	matrix projectionMatrix;
        ///};
        ///
        ///cbuffer CameraPosition : register(b1)
        ///{
        ///	float3 cameraPosition;
        ///};
        ///
        ///cbuffer ObjectBuffer : register(b2)
        ///{
        ///	matrix objectmatrix;
        ///};
        ///
        /////////////////////////
        ///////   TYPES
        /////////////////////////
        ///struct VertexInputType
        ///{
        ///	float4 position : POSITION;
        ///	float2 tex : TEXCOORD0;
        ///	float3 normal : NORMAL;
        ///};
        ///
        ///struct PixelInputType
        ///{
        ///	float4 position : SV_POSITION;
        ///	float [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string VertexShader3D {
            get {
                return ResourceManager.GetString("VertexShader3D", resourceCulture);
            }
        }
    }
}
